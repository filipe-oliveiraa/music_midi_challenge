// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Play a musician
	// (POST /v1/music/play/{name})
	PlayMusic(ctx echo.Context, name string) error
	// Register a musician
	// (POST /v1/musician)
	RegisterMusician(ctx echo.Context) error
	// Unregister a Musician
	// (DELETE /v1/musician/{id})
	UnregisterMusician(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PlayMusic converts echo context to params.
func (w *ServerInterfaceWrapper) PlayMusic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PlayMusic(ctx, name)
	return err
}

// RegisterMusician converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterMusician(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterMusician(ctx)
	return err
}

// UnregisterMusician converts echo context to params.
func (w *ServerInterfaceWrapper) UnregisterMusician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnregisterMusician(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/music/play/:name", wrapper.PlayMusic, m...)
	router.POST(baseURL+"/v1/musician", wrapper.RegisterMusician, m...)
	router.DELETE(baseURL+"/v1/musician/:id", wrapper.UnregisterMusician, m...)

} // Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTW/cNhD9KwRboC0grNaJT3uL04/4YDRw0V5SI+CKsxITiWSHI8cLQ/+9GIraXX3U",
	"m6IJYKCnJanRzHtvHkf7KAvXeGfBUpCbRxmKChoVl1etqfUfgME4y3uPzgOSgfh0i8oWFa80hAKNpxgm",
	"r+K5oArElhMIE8RWBdDCWZlJ2nuQGxkIjS1ll8kY9N62zRZwnu0Xhw8QCNV3QTTGOhT3PSCR3jhkNJag",
	"BOSURaWshfq/Yytc0xh6X6mwQPSNCpVwO9EHfX7SRn1w55hyyOcwjZJ8EdW6TCL81RoELTfvEsihwKRL",
	"Y2GywQpH4e+6TP6E2EMb2waG4zHiGC0aCEGVMFdtgq5PwlWu7c4teJPR8uJbhJ3cyG/yo8nz5PB8ZO8u",
	"k0miMAeHQC3aIJSoTSDueWi9d0ighUdHrnD1oHAQ3wuzgpW4v8jE/QsBVKzEDzKThqCJuWeGSAcKUe1n",
	"VA+oUg8OrG8heGcDLLB3en+OfNRtWiu+yPlv2mAKoxZuvdIaISxo1KRXxBCx4Hyj5+9da9aTL8+Q4Wz3",
	"jZbZAchdx49NssE4928eCrMzheL9UOa1s7otyKF4Q+TFq7fXXNBQzRUnD0cJ5MEiciMvVuvVmjk5D1Z5",
	"IzfyZTzKpFdURYHyClRNPDm6TOYJIi8bIDRFSDsEFfvF60AKqfXD7pMqyzgVeXd/kUeJcl+rff5oVQNd",
	"bJALNOf+tlZ7oXpR/2Ts3MXI41qnx7HLETCqBggwyM27aR5/koddHM8U8W1nBHLT/5x2iLCFLH1IFgzf",
	"3fXBEOgqObVwlsBGFsr7Ogmefwj9h+eY6ilLH0wbHTFmcdvXE7HgFGu0V3+ZYt9erNcTUAQPxLKbCZwp",
	"s1ndiElswdhSsJKg2TOX68t5w/pQ60jsXGtjnIadamv6Ygr1I3kBZmvhwUPB8wxSTCZD2zQK9xMvpQuq",
	"yhCn0wVfwBNzDkNj0ZO3UJpAgCe5Fqw5RN0cy/2v7MJD9JXWT1glzQ/xCRD474c3Nf/baOk5mWah2WeM",
	"kz8a3fVsayCY8/7d4jHpzT876Bh34qEnp5xZ+gotzLr46fmXk25ulXHtXz+uxI+RsT6QWvW9f/n1u/iz",
	"w63RGoaSl1+/5OuqtR+Pk271nFy7aLGZb7vu7wAAAP//lgGu6jcNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
