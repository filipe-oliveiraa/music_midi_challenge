// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Play a note
	// (POST /v1/play)
	Play(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Play converts echo context to params.
func (w *ServerInterfaceWrapper) Play(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Play(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/play", wrapper.Play, m...)

} // Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVUW8bNwz+KwQ7YBtws50u2IPfmmFb87AhaIG9LEWh6Gif2jtJoygnRuH/PlAnxzvb",
	"gAs0bxKPIr+P32f6C9owxODJS8LlF0y2o8GU4012ffs3cXLB6z1yiMTiqHx9YONtp6eWkmUXpaThTYmD",
	"dAQPWgBcggeTqIXgsUHZRsIlJmHn17hrsCR99Hl4ID6t9kfgJ0rC5vsEg/OBYTMCgvriuaLzQmtiLWk7",
	"4z31347NhmFw8rEz6QzRtyZ1EFYwJn190cF8CpeYasrXMC0jeZGp7Rpk+jc7phaX/1SQ+wZHKk0H0+yt",
	"cBj8h12DvzGP0Ka2oX14irhkw0ApmTWdTu0I3VhEu9z6VTjjTUWrh++YVrjEV/ODyefV4fOJvXcN1hGl",
	"U3BMktknMNC7JKp5yjEGFmohcpBgQ7+fcIIfwM1oBpurBjavgcTO4Eds0AkNpfaJIWrAMJvtCdVnVFWD",
	"Z9bvKMXgE51hH9rtJfJlbse9ykOt/2dOzv4V5ExxX6PTCanff7kG8ja01EJJuiRiSfqg0UQ2s5PtewVX",
	"OZBh4jdZusPt98CDEVzinUkkAZtxWWmLMeHQshOJuNParhpkivd9JOtWzhq9q6D66/01+DZbCQxvRSK8",
	"ubvVgk56KqsjfKb6ZfIan52DS7yaLWYL1TRE8iY6XOLPJdRgNNIVavOOTF947RqcV3x6HEjY2VRvTKbI",
	"qOckhiXH/e3RrNdlWeptczWPvSmCx5DklOtdb7Zgiib3ilbVLMhv2/oVR2EoyU21jg1eyJdiJsa+Up1/",
	"SuM/weiiSx47uKgoMUX1bmwIpeP/jSGcqThltHcZ2evF4giV0JMob3eE59hyJ331ITw66eD+/tVPuscU",
	"MxjfwmfaLjemzwS985RUxuvF9elAq07wSEy6/aPrddlnwdJtZXIvLzbEcY2eIZI9PUWyuoOo5jSY8jAY",
	"3k5VVxebdSrb5Ep/cbvdfwEAAP//lPD2aPYHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
